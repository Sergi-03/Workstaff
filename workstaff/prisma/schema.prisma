// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique
  password String
  role Role
  createdAt DateTime @default(now())
  companyProfile CompanyProfile?
  workerProfile  WorkerProfile?
  notifications Notification[]
}

model CompanyProfile {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String @unique
  name String
  cif String
  contactInfo String
  jobs Job[]
  contracts Contract[]
}

model WorkerProfile {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String @unique
  fullname String
  photoUrl String?
  idPhotoUrl String       
  verified Boolean @default(false) 
  certificates String[]
  experience String?
  skills String[]
  availability String[]
  reviews Review[]
  attendances Attendance[]
  courses CourseProgress[]
  applications Application[]
  contracts Contract[]
}


model Job {
  id String @id @default(cuid())
  title String
  description String
  location String
  requiredSkills String[]
  duration String?
  salary Float?
  createdAt DateTime @default(now())
  company CompanyProfile @relation(fields: [companyId], references: [id])
  companyId String
  applications Application[]
  contracts Contract[]
}

model Application {
  id String @id @default(cuid())
  worker WorkerProfile @relation(fields: [workerId], references: [id])
  workerId String
  job Job @relation(fields: [jobId], references: [id])
  jobId String
  status ApplicationStatus @default(PENDING)
  createdAt DateTime @default(now())
}

model Review {
 id String @id @default(cuid())
 worker WorkerProfile @relation(fields: [workerId], references: [id])
 workerId String
 stars Int
 comment String?
 createdAt DateTime @default(now())
}

model Attendance {
  id String @id @default(cuid())
  worker WorkerProfile @relation(fields: [workerId], references: [id])
  workerId String
  checkIn DateTime
  checkOut DateTime?
  location String?
  supervisorApproved Boolean @default(false)
}

model Contract {
  id String @id @default(cuid())
  worker WorkerProfile @relation(fields: [workerId], references: [id])
  workerId String
  company CompanyProfile @relation(fields: [companyId], references: [id])
  companyId String
  job Job @relation(fields: [jobId], references: [id])
  jobId String
  status ContractStatus @default(DRAFT)
  createdAt DateTime @default(now())
}

model Course {
  id String @id @default(cuid())
  title String
  youtubeUrl String
  createdAt DateTime @default(now())
  progress CourseProgress[]
}

model CourseProgress {
  id String @id @default(cuid())
  worker WorkerProfile @relation(fields: [workerId], references: [id])
  workerId String
  course Course @relation(fields: [courseId], references: [id])
  courseId String
  completed Boolean @default(false)
  progress Int @default(0) 
}

model Notification {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  message String
  type String?
  read Boolean @default(false)
  createdAt DateTime @default(now())
}

enum Role {
  COMPANY
  WORKER
  ADMIN
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ContractStatus {
  DRAFT
  SIGNED
  CANCELLED
}